{"version":3,"file":"static/js/690.77f39ca8.chunk.js","mappings":"sLAEA,MCF2D,GAAgBA,WDEtD,CACjBC,KAAM,cACNC,QAAS,8mQA4NTC,YAAa,8IACbC,YAAa,mBACbC,IAAK,qtEA+ELC,QAAS,CACLC,QAAQ,EACRC,UAAW,oBACXC,MAAO,oGAKPC,KAAM,CAAC,CACXC,MAAO,mDACPR,YAAa,mDACbS,KAAM,0rBAgCNC,MAAO,CAAC,CACRZ,KAAM,cACNG,YAAa,+BACbU,gBAAiB,kDACjBC,U,SACF,CACEd,KAAM,OACNG,YAAa,OACbW,U,eCnWSC,EAAW,CAAC,KAAO,cAAc,QAAU,QAAQ,gBAAe,EAAK,aAAa,eAAe,QAAU,CAAC,CAAC,KAAO,cAAc,QAAU,4CAA4C,YAAc,8IAAyD,YAAc,qB","sources":["../../README.md","../node_modules/readme/modules.js"],"sourcesContent":["import * as component_1 from '@kne/current-lib_axios-fetch';\nimport * as component_2 from 'antd';\nconst readmeConfig = {\n    name: `axios-fetch`,\n    summary: `<h3>模块概述</h3>\n<p>本模块提供了一套基于 Promise 的 HTTP 请求封装，主要包含以下核心功能：</p>\n<ol>\n<li><strong>基础请求处理</strong>：支持常规请求和特殊表单提交</li>\n<li><strong>自动错误处理</strong>：内置统一错误捕获机制</li>\n<li><strong>URL 参数处理</strong>：自动解析 URL 参数和查询字符串</li>\n<li><strong>响应格式标准化</strong>：统一返回数据格式为 <code>{ code, data, msg }</code> 结构</li>\n<li><strong>请求加载器</strong>：支持通过 loader 函数预处理请求参数</li>\n</ol>\n<h3>核心方法</h3>\n<h3><code>createAjax(config)</code></h3>\n<pre><code class=\"language-javascript\">import createAjax from '@kne/axios-fetch';\n\nconst ajax = createAjax(options);\n</code></pre>\n<h3>全局配置参数</h3>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>baseUrl</code></td>\n<td><code>String</code></td>\n<td><code>''</code></td>\n<td>基础请求路径</td>\n</tr>\n<tr>\n<td><code>getDefaultHeaders</code></td>\n<td><code>Function</code></td>\n<td><code>() =&gt; ({})</code></td>\n<td>获取默认请求头的函数</td>\n</tr>\n<tr>\n<td><code>defaultError</code></td>\n<td><code>String</code></td>\n<td><code>'请求发生错误'</code></td>\n<td>默认错误提示信息</td>\n</tr>\n<tr>\n<td><code>showResponseError</code></td>\n<td><code>Function</code></td>\n<td><code>(response) =&gt; {...}</code></td>\n<td>判断是否显示错误信息的函数</td>\n</tr>\n<tr>\n<td><code>getResponseError</code></td>\n<td><code>Function</code></td>\n<td><code>(response) =&gt; {...}</code></td>\n<td>从响应中提取错误信息的函数</td>\n</tr>\n<tr>\n<td><code>errorHandler</code></td>\n<td><code>Function</code></td>\n<td><code>() =&gt; {}</code></td>\n<td>全局错误处理函数</td>\n</tr>\n<tr>\n<td><code>validateStatus</code></td>\n<td><code>Function</code></td>\n<td><code>() =&gt; true</code></td>\n<td>验证响应状态的函数</td>\n</tr>\n<tr>\n<td><code>registerInterceptors</code></td>\n<td><code>Function</code></td>\n<td><code>() =&gt; {}</code></td>\n<td>注册拦截器的函数</td>\n</tr>\n</tbody>\n</table>\n<h3>配置函数详细说明</h3>\n<h4><code>showResponseError(response)</code></h4>\n<p>判断是否应该显示错误信息</p>\n<p><strong>参数</strong>:</p>\n<ul>\n<li><code>response</code>: 响应对象</li>\n</ul>\n<p><strong>返回值</strong>:</p>\n<ul>\n<li><code>Boolean</code>: 是否显示错误</li>\n</ul>\n<p><strong>默认逻辑</strong>:</p>\n<pre><code class=\"language-javascript\">response.status !== 200 || \n(Object.hasOwn(response.data, 'code') &amp;&amp; \n response.data.code !== 0 &amp;&amp; \n response.config.showError !== false)\n</code></pre>\n<h4><code>getResponseError(response)</code></h4>\n<p>从响应中提取错误信息</p>\n<p><strong>参数</strong>:</p>\n<ul>\n<li><code>response</code>: 响应对象</li>\n</ul>\n<p><strong>返回值</strong>:</p>\n<ul>\n<li><code>String</code>: 错误信息</li>\n</ul>\n<p><strong>查找顺序</strong>:</p>\n<ol>\n<li><code>response.data.msg</code></li>\n<li><code>response.data.error_msg.detail</code></li>\n<li><code>response.data.error_msg</code></li>\n</ol>\n<h3>使用示例</h3>\n<pre><code class=\"language-javascript\">// 初始化配置\nconst options = {\n  baseUrl: 'https://api.example.com',\n  getDefaultHeaders: () =&gt; ({\n    'X-Requested-With': 'XMLHttpRequest'\n  }),\n  errorHandler: (error) =&gt; {\n    console.error('请求错误:', error);\n  }\n};\n\n// 应用配置\ncreateAjax(options);\n</code></pre>\n<h3>基础请求方法，支持两种调用方式：</h3>\n<h4>1. 使用 loader 函数</h4>\n<pre><code class=\"language-javascript\">ajax({\n  loader: (params) =&gt; {\n    // 预处理逻辑\n    return processedData;\n  }\n}).then(response =&gt; {\n  // 响应格式: { data: { code: 0, data: ... } }\n});\n</code></pre>\n<p><strong>特性</strong>：</p>\n<ul>\n<li>自动包装 loader 返回值为标准响应格式</li>\n<li>错误自动捕获（code 500）</li>\n<li>支持默认错误处理器</li>\n</ul>\n<h4>2. 常规请求</h4>\n<pre><code class=\"language-javascript\">ajax({\n  url: '/api/endpoint',\n  method: 'get',\n  params: { id: 123 }\n}).then(response =&gt; {\n  // 标准响应格式\n});\n</code></pre>\n<p><strong>自动处理</strong>：</p>\n<ul>\n<li>URL 参数解析（通过 <code>parseUrlParams</code>）</li>\n<li>基础路径自动拼接</li>\n</ul>\n<h3><code>ajax.postForm(config)</code></h3>\n<p>专门的表单提交方法</p>\n<pre><code class=\"language-javascript\">ajax.postForm({\n  url: '/submit',\n  params: { ref: 'web' },  // 转换为查询字符串\n  data: { name: 'value' }  // 表单数据\n});\n</code></pre>\n<p><strong>特性</strong>：</p>\n<ul>\n<li>自动将 <code>params</code> 转换为 URL 查询字符串</li>\n<li>自动添加默认请求头</li>\n<li>使用 <code>application/x-www-form-urlencoded</code> 格式提交</li>\n</ul>\n<h3>响应格式规范</h3>\n<p>所有请求返回统一格式：</p>\n<pre><code class=\"language-typescript\">{\n  data: {\n    code: number,  // 0-成功, 非0-错误\n    data: any,     // 响应数据\n    msg?: string   // 错误信息\n  }\n}\n</code></pre>\n<h3>错误处理</h3>\n<ul>\n<li><strong>自动捕获</strong>：所有 loader 函数和请求错误会自动捕获</li>\n<li><strong>错误码</strong>：系统错误统一返回 code 500</li>\n<li><strong>错误消息</strong>：优先使用错误对象的 message 属性</li>\n</ul>\n<h3>使用示例</h3>\n<h4>基础 GET 请求</h4>\n<pre><code class=\"language-javascript\">ajax({\n  url: '/user',\n  params: { id: 123 }\n}).then(({ data }) =&gt; {\n  if (data.code === 0) {\n    console.log(data.data);\n  }\n});\n</code></pre>\n<h4>表单提交</h4>\n<pre><code class=\"language-javascript\">ajax.postForm({\n  url: '/register',\n  data: {\n    username: 'test',\n    password: '123456'\n  }\n});\n</code></pre>\n<h4>使用 loader 预处理</h4>\n<pre><code class=\"language-javascript\">ajax({\n  loader: () =&gt; {\n    return fetchSomeData();\n  }\n}).then(({ data }) =&gt; {\n  // 处理标准化响应\n});\n</code></pre>\n<h3>注意事项</h3>\n<ol>\n<li><code>baseUrl</code> 需要在模块引入前配置</li>\n<li>表单提交时不需要手动设置 <code>Content-Type</code></li>\n<li>错误处理器可通过外部覆盖实现自定义</li>\n</ol>`,\n    description: `一个axios的简单封装，支持loader和url params，和@kne/react-fetch保持统一`,\n    packageName: `@kne/axios-fetch`,\n    api: `<table>\n<thead>\n<tr>\n<th>方法/属性</th>\n<th>类型</th>\n<th>描述</th>\n<th>参数</th>\n<th>返回值</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>ajax(config)</strong></td>\n<td><code>Function</code></td>\n<td>基础请求方法</td>\n<td><code>config: Object</code>:&lt;br&gt;- <code>url?: String</code>&lt;br&gt;- <code>method?: String</code>&lt;br&gt;- <code>params?: Object</code>&lt;br&gt;- <code>loader?: Function</code></td>\n<td><code>Promise&lt;{data: {code: number, data: any, msg?: string}}&gt;</code></td>\n<td><code>js&lt;br&gt;ajax({&lt;br&gt;  url: '/api',&lt;br&gt;  method: 'get'&lt;br&gt;})&lt;br&gt;</code></td>\n</tr>\n<tr>\n<td><strong>ajax.postForm(config)</strong></td>\n<td><code>Function</code></td>\n<td>表单提交方法</td>\n<td><code>config: Object</code>:&lt;br&gt;- <code>url: String</code>&lt;br&gt;- <code>params?: Object</code>&lt;br&gt;- <code>data: Object</code></td>\n<td><code>Promise&lt;AxiosResponse&gt;</code></td>\n<td><code>js&lt;br&gt;ajax.postForm({&lt;br&gt;  url: '/submit',&lt;br&gt;  data: {key: 'value'}&lt;br&gt;})&lt;br&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h2>Config 参数详情</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>描述</th>\n<th>适用方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>url</code></td>\n<td><code>String</code></td>\n<td>是*</td>\n<td>请求地址（*loader方式可选）</td>\n<td>全部</td>\n</tr>\n<tr>\n<td><code>method</code></td>\n<td><code>String</code></td>\n<td>否</td>\n<td>HTTP 方法</td>\n<td>ajax()</td>\n</tr>\n<tr>\n<td><code>params</code></td>\n<td><code>Object</code></td>\n<td>否</td>\n<td>URL 查询参数</td>\n<td>全部</td>\n</tr>\n<tr>\n<td><code>data</code></td>\n<td><code>Object</code></td>\n<td>是</td>\n<td>请求体数据</td>\n<td>postForm()</td>\n</tr>\n<tr>\n<td><code>loader</code></td>\n<td><code>Function</code></td>\n<td>否</td>\n<td>数据预处理函数</td>\n<td>ajax()</td>\n</tr>\n</tbody>\n</table>`,\n    example: {\n        isFull: false,\n        className: `axios_fetch_cd2d9`,\n        style: `.axios_fetch_cd2d9 .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { default: axiosFetch } = _AxiosFetch;\nconst { Button } = antd;\n\nconst ajax = axiosFetch();\n\nconst BaseExample = () => {\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          ajax({\n            loader: async () => {\n              return await new Promise(resolve => {\n                setTimeout(() => {\n                  resolve('请求成功');\n                }, 1000);\n              });\n            }\n          }).then(({data}) => {\n            console.log(data);\n            alert(data.data);\n          });\n        }}>\n        点击发送请求\n      </Button>\n    </div>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_AxiosFetch\",\n    packageName: \"@kne/current-lib_axios-fetch\",\n    importStatement: \"import * as _AxiosFetch from \\\"@kne/axios-fetch\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import AxiosFetch from '@components/axios-fetch/README.md';export default {AxiosFetch};\nexport const manifest = {\"name\":\"axios-fetch\",\"version\":\"1.0.3\",\"open-version\":true,\"public-url\":\"/axios-fetch\",\"modules\":[{\"name\":\"axios-fetch\",\"baseDir\":\"/home/runner/work/axios-fetch/axios-fetch\",\"description\":\"一个axios的简单封装，支持loader和url params，和@kne/react-fetch保持统一\",\"packageName\":\"@kne/axios-fetch\"}]};"],"names":["AxiosFetch","name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","importStatement","component","manifest"],"sourceRoot":""}