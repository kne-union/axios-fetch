{"version":3,"file":"static/js/690.baf15706.chunk.js","mappings":"sLAEA,MCF2D,GAAgBA,WDEtD,CACjBC,KAAM,cACNC,QAAS,suFA6DTC,YAAa,8IACbC,YAAa,mBACbC,IAAK,65GA4ELC,QAAS,CACLC,QAAQ,EACRC,UAAW,oBACXC,MAAO,oGAKPC,KAAM,CAAC,CACXC,MAAO,mDACPR,YAAa,mDACbS,KAAM,0rBAgCNC,MAAO,CAAC,CACRZ,KAAM,cACNG,YAAa,+BACbU,gBAAiB,kDACjBC,U,SACF,CACEd,KAAM,OACNG,YAAa,OACbW,U,eCjMSC,EAAW,CAAC,KAAO,cAAc,QAAU,QAAQ,gBAAe,EAAK,aAAa,eAAe,QAAU,CAAC,CAAC,KAAO,cAAc,QAAU,4CAA4C,YAAc,8IAAyD,YAAc,qB","sources":["../../README.md","../node_modules/readme/modules.js"],"sourcesContent":["import * as component_1 from '@kne/current-lib_axios-fetch';\nimport * as component_2 from 'antd';\nconst readmeConfig = {\n    name: `axios-fetch`,\n    summary: `<p>@kne/axios-fetch 是一个 axios 的轻量级封装库，提供了更便捷的 API 调用方式和更强大的功能扩展。该库与 @kne/react-fetch 保持接口统一，使得在 React 项目中能够无缝切换。</p>\n<h3>主要特性</h3>\n<ol>\n<li>\n<p><strong>URL 参数模板</strong></p>\n<ul>\n<li>支持在 URL 中使用 <code>{paramName}</code> 语法</li>\n<li>自动替换 URL 中的参数占位符</li>\n<li>简化动态 URL 的构建</li>\n</ul>\n</li>\n<li>\n<p><strong>统一的错误处理</strong></p>\n<ul>\n<li>集中式错误处理机制</li>\n<li>可自定义错误处理逻辑</li>\n<li>支持全局错误拦截</li>\n</ul>\n</li>\n<li>\n<p><strong>灵活的拦截器</strong></p>\n<ul>\n<li>支持请求和响应拦截器</li>\n<li>可自定义拦截器注册逻辑</li>\n<li>方便进行请求/响应的预处理和后处理</li>\n</ul>\n</li>\n<li>\n<p><strong>默认请求头管理</strong></p>\n<ul>\n<li>支持动态设置默认请求头</li>\n<li>便于统一管理认证信息</li>\n<li>灵活的请求头配置机制</li>\n</ul>\n</li>\n<li>\n<p><strong>Loader 功能</strong></p>\n<ul>\n<li>支持数据模拟加载</li>\n<li>便于开发和测试</li>\n<li>无缝切换真实请求和模拟数据</li>\n</ul>\n</li>\n<li>\n<p><strong>表单数据支持</strong></p>\n<ul>\n<li>提供 postForm 方法</li>\n<li>自动处理表单数据格式</li>\n<li>简化表单提交流程</li>\n</ul>\n</li>\n</ol>\n<h3>使用场景</h3>\n<ol>\n<li>需要统一管理 API 请求的项目</li>\n<li>需要处理复杂 URL 参数的场景</li>\n<li>需要统一错误处理的应用</li>\n<li>需要灵活配置请求/响应拦截的系统</li>\n<li>需要支持数据模拟的开发环境</li>\n<li>需要处理表单提交的应用</li>\n</ol>`,\n    description: `一个axios的简单封装，支持loader和url params，和@kne/react-fetch保持统一`,\n    packageName: `@kne/axios-fetch`,\n    api: `<h3>createAjax(options)</h3>\n<p>创建一个 axios 实例的封装。</p>\n<h4>参数</h4>\n<ul>\n<li><code>options</code>: Object\n<ul>\n<li><code>baseURL</code>: String - API 的基础 URL</li>\n<li><code>errorHandler</code>: Function - 错误处理函数</li>\n<li><code>registerInterceptors</code>: Function - 注册拦截器的函数</li>\n<li><code>getDefaultHeaders</code>: Function - 获取默认请求头的函数</li>\n<li><code>defaultError</code>: String - 默认错误信息</li>\n<li><code>showResponseError</code>: Function - 判断是否显示响应错误的函数</li>\n<li><code>getResponseError</code>: Function - 获取响应错误信息的函数</li>\n<li><code>...axiosOptions</code> - 其他 axios 配置选项</li>\n</ul>\n</li>\n</ul>\n<h4>返回值</h4>\n<p>返回一个封装后的 ajax 函数，具有以下特性：</p>\n<ul>\n<li>\n<p><code>ajax(params)</code>: 发送请求的主函数</p>\n<ul>\n<li><code>params.loader</code>: Function - 可选的数据加载函数</li>\n<li><code>params.urlParams</code>: Object - URL 参数对象</li>\n<li><code>params.url</code>: String - 请求 URL</li>\n<li>其他 axios 请求配置</li>\n</ul>\n</li>\n<li>\n<p><code>ajax.postForm(config)</code>: 发送表单数据的便捷方法</p>\n<ul>\n<li><code>config.url</code>: String - 请求 URL</li>\n<li><code>config.params</code>: Object - 查询参数</li>\n<li><code>config.data</code>: Object - 表单数据</li>\n<li><code>config.urlParams</code>: Object - URL 参数对象</li>\n<li>其他 axios 请求配置</li>\n</ul>\n</li>\n<li>\n<p><code>ajax.baseURL</code>: String - 基础 URL</p>\n</li>\n<li>\n<p><code>ajax.parseUrlParams</code>: Function - URL 参数解析函数</p>\n</li>\n</ul>\n<h3>URL 参数替换</h3>\n<p>支持在 URL 中使用 <code>{paramName}</code> 语法，这些参数将被 <code>urlParams</code> 对象中的对应值替换：</p>\n<pre><code class=\"language-javascript\">ajax({\n  url: '/users/{userId}/posts/{postId}',\n  urlParams: {\n    userId: '123',\n    postId: '456'\n  }\n});\n// 将请求 /users/123/posts/456\n</code></pre>\n<h3>Loader 功能</h3>\n<p>支持使用 loader 函数来模拟请求：</p>\n<pre><code class=\"language-javascript\">ajax({\n  loader: () =&gt; {\n    return new Promise((resolve) =&gt; {\n      resolve({ name: 'John' });\n    });\n  }\n});\n// 返回 { data: { code: 0, data: { name: 'John' } } }\n</code></pre>\n<h3>错误处理</h3>\n<p>默认的错误处理逻辑：</p>\n<ul>\n<li>非 200 状态码</li>\n<li>响应数据中 code 不为 0</li>\n<li>请求发生错误</li>\n</ul>\n<p>可以通过 <code>showResponseError</code> 和 <code>getResponseError</code> 选项自定义错误处理逻辑。</p>`,\n    example: {\n        isFull: false,\n        className: `axios_fetch_cd2d9`,\n        style: `.axios_fetch_cd2d9 .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { default: axiosFetch } = _AxiosFetch;\nconst { Button } = antd;\n\nconst ajax = axiosFetch();\n\nconst BaseExample = () => {\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          ajax({\n            loader: async () => {\n              return await new Promise(resolve => {\n                setTimeout(() => {\n                  resolve('请求成功');\n                }, 1000);\n              });\n            }\n          }).then(({data}) => {\n            console.log(data);\n            alert(data.data);\n          });\n        }}>\n        点击发送请求\n      </Button>\n    </div>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_AxiosFetch\",\n    packageName: \"@kne/current-lib_axios-fetch\",\n    importStatement: \"import * as _AxiosFetch from \\\"@kne/axios-fetch\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import AxiosFetch from '@components/axios-fetch/README.md';export default {AxiosFetch};\nexport const manifest = {\"name\":\"axios-fetch\",\"version\":\"1.0.6\",\"open-version\":true,\"public-url\":\"/axios-fetch\",\"modules\":[{\"name\":\"axios-fetch\",\"baseDir\":\"/home/runner/work/axios-fetch/axios-fetch\",\"description\":\"一个axios的简单封装，支持loader和url params，和@kne/react-fetch保持统一\",\"packageName\":\"@kne/axios-fetch\"}]};"],"names":["AxiosFetch","name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","importStatement","component","manifest"],"sourceRoot":""}